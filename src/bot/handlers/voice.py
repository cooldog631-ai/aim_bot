"""Handler for voice messages."""

from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import Message

from src.bot.keyboards import get_confirmation_keyboard
from src.bot.states import ReportStates
from src.services.report_service import ReportService
from src.utils.logger import setup_logger

logger = setup_logger(__name__)
router = Router(name="voice")

# Initialize service
report_service = ReportService()


@router.message(F.voice)
async def handle_voice_message(message: Message, state: FSMContext, user_id: str):
    """Handle incoming voice messages."""
    logger.info(f"Received voice message from user {user_id}")

    # Send processing message
    processing_msg = await message.answer("üé§ –ü–æ–ª—É—á–∏–ª –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é...")

    try:
        # Download voice file
        voice_file = await message.bot.download(message.voice.file_id)

        # Read file content
        voice_data = voice_file.read()

        # Process voice message through service
        result = await report_service.process_voice_message(user_id, voice_data)

        # Delete processing message
        await processing_msg.delete()

        if result["status"] == "complete":
            # Report is complete, show for confirmation
            formatted_report = _format_report(result["data"])
            await message.answer(
                f"‚úÖ <b>–û—Ç—á–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω!</b>\n\n{formatted_report}\n\n"
                f"–í—Å–µ –≤–µ—Ä–Ω–æ? –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–ª–∏ –∑–∞–ø—Ä–æ—Å–∏—Ç–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è.",
                reply_markup=get_confirmation_keyboard(),
            )
            await state.set_state(ReportStates.waiting_for_confirmation)
            await state.update_data(report_data=result["data"])

        elif result["status"] == "incomplete":
            # Need clarification
            missing_fields = result.get("missing_fields", [])
            questions = result.get("questions", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.")

            await message.answer(
                f"üìù –°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç—á–µ—Ç! –ú–Ω–µ –Ω—É–∂–Ω–∞ –µ—â–µ –ø–∞—Ä–∞ –¥–µ—Ç–∞–ª–µ–π:\n\n{questions}\n\n"
                f"–û—Ç–≤–µ—Ç—å –≥–æ–ª–æ—Å–æ–≤—ã–º –∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º."
            )
            await state.set_state(ReportStates.waiting_for_clarification)
            await state.update_data(
                partial_data=result.get("data", {}), missing_fields=missing_fields
            )

        else:
            # Error
            error_msg = result.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
            await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {error_msg}\n\n–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.")

    except Exception as e:
        logger.error(f"Error processing voice message: {e}", exc_info=True)
        await processing_msg.delete()
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )


@router.message(ReportStates.waiting_for_clarification, F.text | F.voice)
async def handle_clarification(message: Message, state: FSMContext, user_id: str):
    """Handle clarification messages (text or voice)."""
    data = await state.get_data()
    partial_data = data.get("partial_data", {})

    processing_msg = await message.answer("üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é...")

    try:
        if message.voice:
            # Download and process voice
            voice_file = await message.bot.download(message.voice.file_id)
            voice_data = voice_file.read()
            result = await report_service.process_clarification(
                user_id, voice_data, partial_data, is_voice=True
            )
        else:
            # Process text
            result = await report_service.process_clarification(
                user_id, message.text, partial_data, is_voice=False
            )

        await processing_msg.delete()

        if result["status"] == "complete":
            formatted_report = _format_report(result["data"])
            await message.answer(
                f"‚úÖ <b>–û—Ç–ª–∏—á–Ω–æ! –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–±—Ä–∞–Ω—ã.</b>\n\n{formatted_report}\n\n"
                f"–í—Å–µ –≤–µ—Ä–Ω–æ? –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–ª–∏ –∑–∞–ø—Ä–æ—Å–∏—Ç–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è.",
                reply_markup=get_confirmation_keyboard(),
            )
            await state.set_state(ReportStates.waiting_for_confirmation)
            await state.update_data(report_data=result["data"])

        elif result["status"] == "incomplete":
            questions = result.get("questions", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.")
            await message.answer(f"üìù {questions}")
            await state.update_data(partial_data=result.get("data", {}))

    except Exception as e:
        logger.error(f"Error processing clarification: {e}", exc_info=True)
        await processing_msg.delete()
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.")


def _format_report(data: dict) -> str:
    """Format report data for display."""
    return f"""
üìÖ <b>–î–∞—Ç–∞:</b> {data.get('date', 'N/A')}
üöú <b>–¢–µ—Ö–Ω–∏–∫–∞:</b> {data.get('equipment_number', 'N/A')}
üë∑ <b>–ë—Ä–∏–≥–∞–¥–∞:</b> {data.get('brigade_number', 'N/A')}
üìù <b>–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —Ä–∞–±–æ—Ç—ã:</b>
{data.get('work_description', 'N/A')}
""".strip()
