"""Handlers for report-related commands."""

from datetime import datetime, timedelta

from aiogram import F, Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message

from src.bot.keyboards import get_main_menu_keyboard, get_period_keyboard
from src.bot.states import ReportStates
from src.services.report_service import ReportService
from src.utils.logger import setup_logger

logger = setup_logger(__name__)
router = Router(name="reports")

# Initialize service
report_service = ReportService()


@router.message(Command("report"))
@router.message(lambda message: message.text in ["üìù –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç", "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç"])
async def cmd_report(message: Message, state: FSMContext):
    """Handle /report command."""
    await message.answer(
        "üé§ <b>–û—Ç–ø—Ä–∞–≤—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Ç—á–µ—Ç–æ–º</b>\n\n"
        "–ù–µ –∑–∞–±—É–¥—å —É–∫–∞–∑–∞—Ç—å:\n"
        "‚Ä¢ –î–∞—Ç—É —Ä–∞–±–æ—Ç—ã\n"
        "‚Ä¢ –ù–æ–º–µ—Ä —Ç–µ—Ö–Ω–∏–∫–∏\n"
        "‚Ä¢ –ù–æ–º–µ—Ä –±—Ä–∏–≥–∞–¥—ã\n"
        "‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç"
    )
    await state.set_state(ReportStates.waiting_for_voice)


@router.message(Command("my_reports"))
@router.message(lambda message: message.text in ["üìä –ú–æ–∏ –æ—Ç—á–µ—Ç—ã", "–ú–æ–∏ –æ—Ç—á–µ—Ç—ã"])
async def cmd_my_reports(message: Message, user_id: str):
    """Handle /my_reports command."""
    await message.answer(
        "üìä <b>–í—ã–±–µ—Ä–∏ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç—á–µ—Ç–æ–≤:</b>", reply_markup=get_period_keyboard()
    )


@router.callback_query(F.data.startswith("period_"))
async def handle_period_selection(callback: CallbackQuery, user_id: str):
    """Handle period selection for viewing reports."""
    period = callback.data.replace("period_", "")

    # Calculate date range
    today = datetime.now().date()
    if period == "today":
        start_date = today
        end_date = today
        period_text = "—Å–µ–≥–æ–¥–Ω—è"
    elif period == "yesterday":
        start_date = today - timedelta(days=1)
        end_date = start_date
        period_text = "–≤—á–µ—Ä–∞"
    elif period == "week":
        start_date = today - timedelta(days=7)
        end_date = today
        period_text = "–∑–∞ –Ω–µ–¥–µ–ª—é"
    elif period == "month":
        start_date = today - timedelta(days=30)
        end_date = today
        period_text = "–∑–∞ –º–µ—Å—è—Ü"
    else:
        await callback.answer("–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
        return

    # Fetch reports
    reports = await report_service.get_user_reports(user_id, start_date, end_date)

    if not reports:
        await callback.message.edit_text(
            f"üì≠ –£ –≤–∞—Å –Ω–µ—Ç –æ—Ç—á–µ—Ç–æ–≤ {period_text}.", reply_markup=None
        )
        return

    # Format and send reports
    reports_text = f"üìä <b>–í–∞—à–∏ –æ—Ç—á–µ—Ç—ã {period_text}:</b>\n\n"
    for i, report in enumerate(reports, 1):
        reports_text += f"<b>{i}. {report.report_date}</b>\n"
        reports_text += f"üöú –¢–µ—Ö–Ω–∏–∫–∞: {report.equipment_number}\n"
        reports_text += f"üë∑ –ë—Ä–∏–≥–∞–¥–∞: {report.brigade_number}\n"
        reports_text += f"üìù {report.work_description[:100]}...\n"
        reports_text += "\n"

    await callback.message.edit_text(reports_text, reply_markup=None)
    await callback.answer()


@router.message(Command("edit_last"))
@router.message(lambda message: message.text in ["‚úèÔ∏è –ò—Å–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç", "–ò—Å–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç"])
async def cmd_edit_last(message: Message, user_id: str):
    """Handle /edit_last command."""
    # Get last report
    last_report = await report_service.get_last_user_report(user_id)

    if not last_report:
        await message.answer("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ç—á–µ—Ç–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
        return

    report_text = f"""
üìù <b>–í–∞—à –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç—á–µ—Ç:</b>

üìÖ –î–∞—Ç–∞: {last_report.report_date}
üöú –¢–µ—Ö–Ω–∏–∫–∞: {last_report.equipment_number}
üë∑ –ë—Ä–∏–≥–∞–¥–∞: {last_report.brigade_number}
üìù –†–∞–±–æ—Ç—ã: {last_report.work_description}

–ß—Ç–æ –Ω—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å? –û—Ç–ø—Ä–∞–≤—å –≥–æ–ª–æ—Å–æ–≤–æ–µ –∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
"""

    await message.answer(report_text)


@router.callback_query(F.data == "confirm_report")
async def handle_confirm_report(callback: CallbackQuery, state: FSMContext, user_id: str):
    """Handle report confirmation."""
    data = await state.get_data()
    report_data = data.get("report_data")

    if not report_data:
        await callback.answer("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –æ—Ç—á–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return

    try:
        # Save report to database
        await report_service.save_report(user_id, report_data)

        await callback.message.edit_text(
            "‚úÖ <b>–û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω!</b>\n\n"
            "–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–∞–±–æ—Ç—É. –ú–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –æ—Ç—á–µ—Ç –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è.",
            reply_markup=None,
        )

        # Clear state
        await state.clear()
        await callback.answer("–û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")

    except Exception as e:
        logger.error(f"Error saving report: {e}", exc_info=True)
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞", show_alert=True)


@router.callback_query(F.data == "edit_report")
async def handle_edit_request(callback: CallbackQuery, state: FSMContext):
    """Handle request to edit report."""
    await callback.message.edit_text(
        "‚úèÔ∏è –ß—Ç–æ –Ω—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å?\n\n–û—Ç–ø—Ä–∞–≤—å –≥–æ–ª–æ—Å–æ–≤–æ–µ –∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏.",
        reply_markup=None,
    )
    await state.set_state(ReportStates.waiting_for_correction)
    await callback.answer()


@router.callback_query(F.data == "cancel_report")
async def handle_cancel_report(callback: CallbackQuery, state: FSMContext):
    """Handle report cancellation."""
    await callback.message.edit_text(
        "‚ùå –û—Ç—á–µ—Ç –æ—Ç–º–µ–Ω–µ–Ω.\n\n–ò—Å–ø–æ–ª—å–∑—É–π /report –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞.", reply_markup=None
    )
    await state.clear()
    await callback.answer("–û—Ç—á–µ—Ç –æ—Ç–º–µ–Ω–µ–Ω")
