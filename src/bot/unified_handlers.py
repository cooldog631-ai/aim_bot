"""Unified message handlers that work with any messenger."""

from src.bot.base_messenger import MessageContext
from src.bot.keyboards import get_main_menu_keyboard
from src.services.report_service import ReportService
from src.utils.logger import setup_logger

logger = setup_logger(__name__)

# Initialize services
report_service = ReportService()


async def handle_start_command(context: MessageContext):
    """Handle /start command from any messenger."""
    user_name = context.username or "–¥—Ä—É–≥"

    welcome_text = f"""
üëã –ü—Ä–∏–≤–µ—Ç, <b>{user_name}</b>!

–Ø - AI Voice Reports Bot, –ø–æ–º–æ–≥—É —Ç–µ–±–µ –±—ã—Å—Ç—Ä–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ—Ç—á–µ—Ç—ã –≥–æ–ª–æ—Å–æ–º.

üé§ <b>–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:</b>
1. –ó–∞–ø–∏—à–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Ç—á–µ—Ç–æ–º
2. –Ø —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É—é –µ–≥–æ –∏ –ø—Ä–æ–≤–µ—Ä—é –Ω–∞ –ø–æ–ª–Ω–æ—Ç—É
3. –ï—Å–ª–∏ —á–µ–≥–æ-—Ç–æ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç - –ø–æ–ø—Ä–æ—à—É —É—Ç–æ—á–Ω–∏—Ç—å
4. –¢—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—à—å - —è —Å–æ—Ö—Ä–∞–Ω—è—é –≤ –±–∞–∑—É

üìù <b>–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –æ—Ç—á–µ—Ç–µ:</b>
‚Ä¢ –î–∞—Ç–∞ —Ä–∞–±–æ—Ç—ã
‚Ä¢ –ù–æ–º–µ—Ä —Ç–µ—Ö–Ω–∏–∫–∏/–∫–æ–º–±–∞–π–Ω–∞
‚Ä¢ –ù–æ–º–µ—Ä –±—Ä–∏–≥–∞–¥—ã
‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç

–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏ –ø–æ –≤—Å–µ–º –∫–æ–º–∞–Ω–¥–∞–º.
"""

    # Note: VK Max doesn't support HTML formatting like Telegram
    # We'll send plain text
    if context.messenger.messenger_type == "vkmax":
        welcome_text = welcome_text.replace("<b>", "").replace("</b>", "")

    await context.reply(welcome_text)


async def handle_help_command(context: MessageContext):
    """Handle /help command from any messenger."""
    help_text = """
üìö <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>

/start - –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
/report - –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç
/my_reports - –ú–æ–∏ –æ—Ç—á–µ—Ç—ã –∑–∞ –ø–µ—Ä–∏–æ–¥
/cancel - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é

üé§ <b>–ì–æ–ª–æ—Å–æ–≤—ã–µ –æ—Ç—á–µ—Ç—ã:</b>
–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º —Ä–∞–±–æ—Ç—ã.

üìä <b>–ü—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç—á–µ—Ç–æ–≤:</b>
–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /my_reports

‚ùì <b>–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å?</b>
–û–±—Ä–∞—Ç–∏—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.
"""

    if context.messenger.messenger_type == "vkmax":
        help_text = help_text.replace("<b>", "").replace("</b>", "")

    await context.reply(help_text)


async def handle_voice_message(context: MessageContext):
    """Handle voice messages from any messenger."""
    logger.info(f"Received voice message from user {context.user_id} via {context.messenger.messenger_type}")

    # Send processing message
    await context.reply("üé§ –ü–æ–ª—É—á–∏–ª –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é...")

    try:
        # Download voice file
        voice_data = await context.download_voice()

        if not voice_data:
            await context.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.")
            return

        # Process voice message through service
        result = await report_service.process_voice_message(context.user_id, voice_data)

        if result["status"] == "complete":
            # Report is complete, show for confirmation
            formatted_report = _format_report(result["data"])
            await context.reply(
                f"‚úÖ –û—Ç—á–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω!\n\n{formatted_report}\n\n"
                f"–í—Å–µ –≤–µ—Ä–Ω–æ? (–û—Ç–≤–µ—Ç—å '–¥–∞' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ '–∏—Å–ø—Ä–∞–≤–∏—Ç—å' –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏–π)"
            )

        elif result["status"] == "incomplete":
            # Need clarification
            questions = result.get("questions", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.")
            await context.reply(
                f"üìù –°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç—á–µ—Ç! –ú–Ω–µ –Ω—É–∂–Ω–∞ –µ—â–µ –ø–∞—Ä–∞ –¥–µ—Ç–∞–ª–µ–π:\n\n{questions}\n\n"
                f"–û—Ç–≤–µ—Ç—å –≥–æ–ª–æ—Å–æ–≤—ã–º –∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º."
            )

        else:
            # Error
            error_msg = result.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
            await context.reply(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {error_msg}\n\n–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.")

    except Exception as e:
        logger.error(f"Error processing voice message: {e}", exc_info=True)
        await context.reply(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )


async def handle_text_message(context: MessageContext):
    """Handle text messages from any messenger."""
    text = context.text.strip().lower()

    # Check for commands
    if text.startswith("/"):
        # Unknown command
        await context.reply(
            "ü§î –Ø –Ω–µ –ø–æ–Ω—è–ª —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.\n\n"
            "–û—Ç–ø—Ä–∞–≤—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏."
        )
        return

    # Check for confirmation keywords
    if text in ["–¥–∞", "yes", "–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", "ok", "–æ–∫"]:
        await context.reply("‚úÖ –û—Ç—á–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!\n\n–ú–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –æ—Ç—á–µ—Ç.")
        # TODO: Save report to database
        return

    # General text message
    await context.reply(
        "üìù –ü–æ–ª—É—á–∏–ª —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n\n"
        "–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞ –æ—Ç–ø—Ä–∞–≤—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏."
    )


def _format_report(data: dict) -> str:
    """Format report data for display."""
    return f"""
üìÖ –î–∞—Ç–∞: {data.get('date', 'N/A')}
üöú –¢–µ—Ö–Ω–∏–∫–∞: {data.get('equipment_number', 'N/A')}
üë∑ –ë—Ä–∏–≥–∞–¥–∞: {data.get('brigade_number', 'N/A')}
üìù –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —Ä–∞–±–æ—Ç—ã:
{data.get('work_description', 'N/A')}
""".strip()
